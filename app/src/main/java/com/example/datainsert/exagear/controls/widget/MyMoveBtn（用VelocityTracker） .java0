package com.example.datainsert.exagear.controls.interfaceOverlay.widget;

import static android.view.MotionEvent.ACTION_CANCEL;
import static android.view.MotionEvent.ACTION_DOWN;
import static android.view.MotionEvent.ACTION_MOVE;
import static android.view.MotionEvent.ACTION_UP;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_FILE_NAME_SETTING;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_KEY_BTN_ALPHA;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_KEY_BTN_BG_COLOR;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_KEY_BTN_HEIGHT;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_KEY_BTN_TXT_COLOR;
import static com.example.datainsert.exagear.controls.ControlsResolver.PREF_KEY_BTN_WIDTH;

import android.content.ClipData;
import android.content.ClipDescription;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.drawable.RippleDrawable;
import android.os.Build;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.AppCompatButton;
import android.text.InputType;
import android.util.AttributeSet;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.FrameLayout;

import com.eltechs.axs.GeometryHelpers;
import com.eltechs.axs.KeyCodesX;
import com.eltechs.axs.xserver.ViewFacade;
import com.example.datainsert.exagear.controls.model.OneKey;

public class MyMoveBtn extends AppCompatButton implements View.OnClickListener {
    private static final String TAG = "MyMoveBtn";
    private final OneKey mOneKey;
    //    private InjectKeyListener injectKeyListener; //非编辑状态下，点击按钮触发的按键操作
//    private final GestureDetectorCompat myGestureListener;
    private final ViewFacade mViewFacade;
    protected int screenWidth;
    protected int screenHeight;
    private boolean isMoving = false; //是否正在移动
    private boolean isEditing = false;//是否正在编辑（是否可以移动）
    private int touchAreaLength = 60;
    private int lastX;
    private int lastY;
    float pressX;
    float pressY;
    private boolean isInjectingPress = false; //修饰键，用来判断应该按下还是松开
    //用于修饰键切换状态时，反转颜色
    private int mBgColor = Color.WHITE;
    private int mTxColor = Color.BLACK;
    /**
     * 用法：
     * 在action_down时，如果为null就通过VelocityTracker.obtain获取一个。如果不为null就.clear()重置一下
     * 在action_down和action_move的时候通过addMovement(event)把事件传进去让它追踪
     * 在action_move时计算速度（up和cancel速度为0），先正常addMovement，然后computeCurrentVelocity(1000)让它内部计算，然后再通过getX/YVelocity获取速度。小于0.1就当做没移动了
     * 在action_up和action_cancel的时候通过.recycle() 归还追踪器。（太频繁貌似会报错。换到detach归还了）
     */
    private VelocityTracker mVelocityTracker = null; //速度追踪，用于判断是否移动了

    public MyMoveBtn(Context context, OneKey oneKey, ViewFacade viewFacade) {
        super(context);

//        setLayoutParams(new ViewGroup.LayoutParams(-2,-2));
        mOneKey = oneKey;
        this.mViewFacade = viewFacade;
//        myGestureListener = new GestureDetectorCompat(getContext(), new MyGestureListener());
        setOnClickListener(this);
        //先不在内部初始化样式了。之后写个public函数，传入是否是自定义位置的。然后从外部调用进行初始化？
    }

    /**
     * 设置样式（颜色，文字，位置等）。在添加到父布局前调用
     */
    public void setupStyle() {
        SharedPreferences sp = getContext().getSharedPreferences(PREF_FILE_NAME_SETTING, Context.MODE_PRIVATE);
        mBgColor = sp.getInt(PREF_KEY_BTN_BG_COLOR, Color.WHITE);
        mTxColor = sp.getInt(PREF_KEY_BTN_TXT_COLOR, Color.BLACK);
        this.setText(mOneKey.getName());
        this.setTag(mOneKey);
        //遍历enum，如果没有匹配的就不设置点击事件了
//                for(KeyCodesX keyCodesX:KeyCodesX.values()){
//                    if(keyCodesX.getValue()==(oneKey.getCode()+8))
//                        setHandlerToButton(btn,keyCodesX,viewOfXServer.getXServerFacade());
//                }
        //设置按钮背景样式
        this.setBackgroundTintList(ColorStateList.valueOf(mBgColor));
        this.setTextColor(mTxColor);
        RippleDrawable spdrawable = (RippleDrawable) this.getBackground();
        spdrawable.setColor(ColorStateList.valueOf(sp.getInt(PREF_KEY_BTN_TXT_COLOR, Color.BLACK) & 0x50ffffff));
        spdrawable.setAlpha(sp.getInt(PREF_KEY_BTN_ALPHA, 255));
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(sp.getInt(PREF_KEY_BTN_WIDTH, -2), sp.getInt(PREF_KEY_BTN_HEIGHT, -2));
        params.setMargins(mOneKey.getMarginLeft(), mOneKey.getMarginTop(), 0, 0);
        this.setLayoutParams(params);
    }

//    public void setInjectKeyListener(InjectKeyListener injectKeyListener) {
//        this.injectKeyListener = injectKeyListener;
//    }


    @Override
    public boolean performClick() {
        return super.performClick();
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
//            startDragAndDrop(new ClipData(TAG,new String[] { ClipDescription.MIMETYPE_TEXT_PLAIN }, new ClipData.Item(TAG)),new DragShadowBuilder(this),null,0);
//        }
        int index = event.getActionIndex();
        int action = event.getActionMasked();
        int pointerId = event.getPointerId(index);
//        //如果不在可编辑情况下，直接返回 按键码也自己处理吧
//        if(!isEditing)
//            return super.onTouchEvent(event);
//        return myGestureListener.onTouchEvent(event);

//        Log.d(TAG, "onTouchEvent: 事件为"+action+"0=down,1=up,2=move");
        //只有当移动的时候自己处理一下，其他交给gesture处理
        switch (action) {
            case ACTION_DOWN: {
//                pressX = event.getRawX();
//                pressY = event.getRawY();
                isMoving=false;
                setPressed(true);
//                if(!isEditing && mViewFacade!=null)
//                    mViewFacade.injectKeyPress((byte) (mOneKey.getCode()+8));
                if (mVelocityTracker == null) {
                    mVelocityTracker = VelocityTracker.obtain();
                } else {
                    mVelocityTracker.clear();
                }
                // Add a user's movement to the tracker.
                mVelocityTracker.addMovement(event);
                if (isEditing) {
                    lastY = (int) event.getRawY();
                    lastX = (int) event.getRawX();
                }
                break;
            }
            case ACTION_CANCEL:{
                setPressed(false);
//                mVelocityTracker.recycle();
                break;
            }
            case ACTION_UP: {
//                Log.d(TAG, "onTouchEvent: 距离："+GeometryHelpers.distance(event.getRawX(), event.getRawY(), pressX, pressY));

                setPressed(false);
                //归还追踪器(是不是要在点击之前归还啊。。。）
//                mVelocityTracker.recycle();
                if(!isMoving)
                    performClick();
//                if(!isEditing && mViewFacade!=null)
//                    mViewFacade.injectKeyRelease((byte) (mOneKey.getCode()+8));

                break;
            }
            case ACTION_MOVE: {
                mVelocityTracker.addMovement(event);
                mVelocityTracker.computeCurrentVelocity(1000);
                if(mVelocityTracker.getXVelocity()>0.1|| mVelocityTracker.getYVelocity()>0.1){
                    isMoving=true;
//                    Log.d("", "X velocity: " + mVelocityTracker.getXVelocity());
//                    Log.d("", "Y velocity: " + mVelocityTracker.getYVelocity());
                }

                if (isEditing) {
                    int tempRawX = (int) event.getRawX();
                    int tempRawY = (int) event.getRawY();

                    int newLeft = getLeft() + tempRawX - lastX;
                    int newTop = getTop() + tempRawY - lastY;

                    lastX = tempRawX;
                    lastY = tempRawY;
                    //把新的位置 oriLeft, newTop, oriRight, oriBottom设置到控件，实现位置移动和大小变化。

                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) getLayoutParams();
                    lp.setMargins(newLeft, newTop, 0, 0);
                    setLayoutParams(lp);

                    mOneKey.setMarginLeft(newLeft);
                    mOneKey.setMarginTop(newTop);
                }
                break;
            }

        }
//        if (this.myGestureListener.onTouchEvent(event)) {
//            return true;
//        }
        return true;
    }

    /**
     * 重写自己的点击事件
     *
     * @param v The view that was clicked.
     */
    @Override
    public void onClick(View v) {
        Log.d(TAG, "onClick: 触发点击");
        /*
        按键输入，如果是shift这种，按下就触发，交给ontouch处理，否则交给onclick处理
        不如先都交给onclick处理吧。修饰键点击时只按下或抬起，普通键点击时一次完整的按下抬起。
         */
        if (!isEditing) {
            if (mViewFacade != null) {
                if (isModifierKey()) {
                    if (!isInjectingPress)
                        mViewFacade.injectKeyPress((byte) (mOneKey.getCode() + 8));
                    else
                        mViewFacade.injectKeyRelease((byte) (mOneKey.getCode() + 8));
                    //修饰键，显示颜色反转
                    setBackgroundTintList(ColorStateList.valueOf(isInjectingPress ? mBgColor : mTxColor));
                    setTextColor(isInjectingPress ? mTxColor : mBgColor);
                } else {
                    mViewFacade.injectKeyType((byte) (mOneKey.getCode() + 8));
                }
                isInjectingPress = !isInjectingPress;
            }
        }
        //编辑状态下，重命名
        else {
            EditText editText = new EditText(getContext());
            editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
            editText.setSingleLine();
            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
            editText.setText(mOneKey.getName());
            new AlertDialog.Builder(getContext())
                    .setPositiveButton(android.R.string.yes, (dialog, which) -> {
                        mOneKey.setName(editText.getText().toString());
                        setText(editText.getText().toString());
                    })
                    .setNegativeButton(android.R.string.cancel, null)
                    .setView(editText).create().show();
        }
    }

    public void setEditing(boolean editing) {
        isEditing = editing;
    }

    public OneKey getmOneKey() {
        return mOneKey;
    }

    /**
     * 判断这个按钮对应的按键是否为修饰键。如果是的话按键输入用ontouch处理（按下时就注入press），否则用click处理
     * 先都由onclick处理吧
     */
    public boolean isModifierKey() {
        int key = mOneKey.getCode() + 8;
        return key == KeyCodesX.KEY_SHIFT_LEFT.getValue() || key == KeyCodesX.KEY_SHIFT_RIGHT.getValue()
                || key == KeyCodesX.KEY_CONTROL_LEFT.getValue() || key == KeyCodesX.KEY_CONTROL_RIGHT.getValue()
                || key == KeyCodesX.KEY_ALT_LEFT.getValue() || key == KeyCodesX.KEY_ALT_RIGHT.getValue();
    }


    //    public interface InjectKeyListener{
//        public void click( KeyCodesX keyCodesX);
//    }


    @Override
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        //速度追踪器要不在这归还？
        if(mVelocityTracker!=null)
            mVelocityTracker.recycle();
    }

    //鸿蒙的点击监听还是有问题。直接用gesture判断吧。给每个
    class MyGestureListener extends GestureDetector.SimpleOnGestureListener {
        private static final String DEBUG_TAG = "Gestures";

        @Override
        public boolean onDown(MotionEvent event) {
//            Log.d(DEBUG_TAG,"onDown: " + event.toString());

            return true;
        }

        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            return MyMoveBtn.this.performClick();
        }

        //现在貌似双击只会触发一次点击。。。是这个的缘故吗（还真是。。。）
        @Override
        public boolean onDoubleTap(MotionEvent e) {
            return MyMoveBtn.this.performClick();
        }

    }
}
